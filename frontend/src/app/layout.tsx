import type { Metadata } from 'next';
import './globals.css';

import { ReactNode } from 'react';
import { cookies } from 'next/headers';

import Providers from '../providers/LanguageProvider';
import { ThemeProvider } from '../providers/ThemeProvider';
import FontProvider from '../providers/FontProvider';

import Header from './components/Header';
import MobileNavigationMenu from './components/MobileNavigationMenu';
import BottomNav from './components/BottomNav';
import { dm_sans, pt_sans } from './utils/fontConfig';

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({ children }: { children: ReactNode }) {
  // Асинхронно достаём куки
  const nextCookies = await cookies();
  const localeFromCookie = nextCookies.get('NEXT_LOCALE')?.value || 'en';
  
  // Считываем theme из куки и сводим к 'dark'|'light'
  const rawTheme = nextCookies.get('theme')?.value;
  const themeCookie = rawTheme === 'light' ? 'light' : 'dark';

  let messages;
  try {
    messages = (await import(`../messages/${localeFromCookie}.json`)).default;
  } catch (error) {
    console.error(`Ошибка загрузки сообщений для локали ${localeFromCookie}:`, error);
    messages = (await import('../messages/en.json')).default;
  }

  // Определяем класс шрифта для локали
  const fontClassName = localeFromCookie === 'ru' ? pt_sans.className : dm_sans.className;

  // Формируем список классов на html
  const htmlClass = [fontClassName];
  if (themeCookie === 'dark') {
    htmlClass.push('dark');
  }

  return (
    <html lang={localeFromCookie} className={htmlClass.join(' ')}>
      <body>
          <Providers initialLocale={localeFromCookie} initialMessages={messages}>
          <ThemeProvider  defaultTheme={themeCookie}>
            <FontProvider
              fonts={{
                en: dm_sans.className,
                ru: pt_sans.className,
                default: dm_sans.className,
              }}
            >
              <Header />
              <MobileNavigationMenu />
              {children}
              <BottomNav />
            </FontProvider>
            </ThemeProvider>
          </Providers>
      </body>
    </html>
  );
}
